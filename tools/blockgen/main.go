package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"text/template"

	"gopkg.in/yaml.v3"

	"github.com/tsatke/mcserver/game/id"
)

var (
	templateText = `// Code generated by "blockgen -in={{ .InFile }} -out={{ .OutFile }} -pkg={{ .Package }}"; DO NOT EDIT.

package {{ .Package }}

import "github.com/tsatke/mcserver/game/id"

var (
	{{- range $name, $descriptor := .Blocks }}
	{{ $name }} = BlockDescriptor{
		ID: {{ idstring $descriptor.ID }},
	}
	{{- end }}
)

func init() {
	{{- range $name, $descriptor := .Blocks }}
	Must(RegisterBlock({{ $name }}))
	{{- end }}
}
`
)

var (
	inFile  string
	outFile string
	pkg     string
)

func init() {
	flag.StringVar(&inFile, "in", "blocks.yaml", "The configuration file that defines the blocks")
	flag.StringVar(&outFile, "out", "blocks.go", "The Go source file that will be generated")
	flag.StringVar(&pkg, "pkg", "main", "The package for which the source file is generated")
}

func main() {
	flag.Parse()

	var definition map[string]Block
	data, err := ioutil.ReadFile(inFile)
	if err != nil {
		panic(err)
	}
	if err := yaml.Unmarshal(data, &definition); err != nil {
		panic(err)
	}

	tmpl := template.Must(template.New("").
		Funcs(map[string]interface{}{
			"idstring": idstring,
		}).
		Parse(templateText))

	f, err := os.OpenFile(outFile, os.O_CREATE|os.O_TRUNC|os.O_WRONLY, 0666) // #nosec
	if err != nil {
		panic(err)
	}
	defer func() { _ = f.Close() }()

	if err := tmpl.Execute(f, TemplateData{
		InFile:  inFile,
		OutFile: outFile,
		Package: pkg,
		Blocks:  definition,
	}); err != nil {
		panic(err)
	}
}

type Block struct {
	ID string
}

type TemplateData struct {
	InFile  string
	OutFile string
	Package string
	Blocks  map[string]Block
}

func idstring(in string) string {
	parsed := id.ParseID(in)
	return fmt.Sprintf(`id.ID{"%s", "%s"}`, parsed.Namespace(), parsed.Name())
}
