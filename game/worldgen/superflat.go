package worldgen

import (
	"time"

	"github.com/rs/zerolog"

	"github.com/tsatke/mcserver/game/block"
	"github.com/tsatke/mcserver/game/chunk"
	"github.com/tsatke/mcserver/game/voxel"
)

type SuperflatGenerator struct {
	log      zerolog.Logger
	seed     int64
	blockMap [256]block.Block
}

func NewSuperflatGenerator(log zerolog.Logger, seed int64) *SuperflatGenerator {
	gen := &SuperflatGenerator{
		log:  log,
		seed: seed,
	}
	for i := range gen.blockMap {
		gen.blockMap[i] = airBlock
	}
	gen.blockMap[0] = bedrockBlock
	gen.blockMap[1] = stoneBlock
	gen.blockMap[2] = stoneBlock
	gen.blockMap[3] = stoneBlock
	gen.blockMap[4] = grassBlock
	return gen
}

func (gen *SuperflatGenerator) GenerateChunk(pos voxel.V2) *chunk.Chunk {
	start := time.Now()
	defer func() {
		gen.log.Debug().
			Stringer("took", time.Since(start)).
			Stringer("chunk", pos).
			Msg("generate chunk")
	}()

	ch := &chunk.Chunk{
		Coord: pos,
		// all the other data has to be generated on save
		LastModified: time.Now(),
		Data: &chunk.Data{
			DataVersion: 0xf1a4,
			Level: chunk.Level{
				XPos:   pos.X,
				ZPos:   pos.Z,
				Status: "full",
			},
		},
	}

	// y can be within [0,4], since we don't generate anything but air above y=4
	for y := 0; y < 5; y++ {
		for z := 0; z < 16; z++ {
			for x := 0; x < 16; x++ {
				blockPos := voxel.V3{x, y, z}
				ch.SetBlockAt(blockPos, gen.blockAt(blockPos))
			}
		}
	}

	ch.Data.Level.Heightmaps.MotionBlocking = make([]int64, 37)
	ch.Data.Level.Heightmaps.MotionBlockingNoLeaves = make([]int64, 37)
	ch.Data.Level.Heightmaps.OceanFloor = make([]int64, 37)
	ch.Data.Level.Heightmaps.OceanFloorWG = make([]int64, 37)
	ch.Data.Level.Heightmaps.WorldSurface = make([]int64, 37)
	ch.Data.Level.Heightmaps.WorldSurfaceWG = make([]int64, 37)

	heightmapMainData := [37]int64{
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
		0b_000000100_000000100_000000100_000000100_000000100_000000100_000000100_0,
	}
	copy(ch.Data.Level.Heightmaps.MotionBlocking, heightmapMainData[:])
	copy(ch.Data.Level.Heightmaps.MotionBlockingNoLeaves, heightmapMainData[:])
	copy(ch.Data.Level.Heightmaps.OceanFloor, heightmapMainData[:])
	copy(ch.Data.Level.Heightmaps.OceanFloorWG, heightmapMainData[:])
	copy(ch.Data.Level.Heightmaps.WorldSurface, heightmapMainData[:])
	copy(ch.Data.Level.Heightmaps.WorldSurfaceWG, heightmapMainData[:])

	return ch
}

func (gen *SuperflatGenerator) blockAt(pos voxel.V3) block.Block {
	return gen.blockMap[pos.Y]
}
